name: Opentofu Template

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: "Specifies the environment of the deployment."
      tofu_version:
        required: true
        type: string
        description: "Specifies the opentofu version."
      node_version:
        required: true
        type: number
        description: "Specifies the node version."
      working_directory:
        required: true
        type: string
        description: "Specifies the working directory."
      tenant_id:
        required: true
        type: string
        description: "Specifies the tenant id of the deployment."
      subscription_id:
        required: true
        type: string
        description: "Specifies the subscription id of the deployment."
    secrets:
      CLIENT_ID:
        required: true
        description: "Specifies the client id."

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  lint:
    name: Opentofu Lint
    runs-on: [ubuntu-latest]
    continue-on-error: false

    steps:
      # Setup Opentofu
      - name: Setup Opentofu
        id: opentofu_setup
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: ${{ inputs.tofu_version }}
          tofu_wrapper: true

      # Check Out Repository
      - name: Check Out Repository
        id: checkout_repository
        uses: actions/checkout@v4

      # Opentofu Format
      - name: Opentofu Format
        id: opentofu_format
        working-directory: ${{ inputs.working_directory }}
        run: |
          tofu fmt -check -recursive

      # Add Pull Request Comment
      - name: Add Pull Request Comment
        uses: actions/github-script@v7
        id: pr_comment
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Opentofu Lint Results
            * Opentofu Version üìé\`${{ inputs.tofu_version }}\`
            * Working Directory üìÇ\`${{ inputs.working_directory }}\`
            * Opentofu Format and Style üñå\`${{ steps.opentofu_format.outcome }}\``;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  plan:
    name: Opentofu Plan
    runs-on: [self-hosted]
    continue-on-error: false
    environment: ${{ inputs.environment }}
    needs: [lint]
    concurrency:
      group: opentofu-${{ inputs.environment }}
      cancel-in-progress: false

    env:
      ARM_TENANT_ID: ${{ inputs.tenant_id }}
      ARM_SUBSCRIPTION_ID: ${{ inputs.subscription_id }}
      ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
      ARM_USE_OIDC: true

    steps:
      # Setup Node
      - name: Setup Node
        id: node_setup
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}

      # Setup Opentofu
      - name: Setup Opentofu
        id: opentofu_setup
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: ${{ inputs.tofu_version }}
          tofu_wrapper: true

      # Check Out Repository
      - name: Check Out Repository
        id: checkout_repository
        uses: actions/checkout@v4

      # Azure login
      - name: Azure login
        id: azure_login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.CLIENT_ID }}
          tenant-id: ${{ inputs.tenant_id }}
          subscription-id: ${{ inputs.subscription_id }}

      # Opentofu Init
      - name: Opentofu Init
        id: opentofu_init
        working-directory: ${{ inputs.working_directory }}
        run: |
          tofu init -backend-config="azurerm.tfbackend"

      # Opentofu Validate
      - name: Opentofu Validate
        id: opentofu_validate
        working-directory: ${{ inputs.working_directory }}
        run: |
          tofu validate

      # Opentofu Plan
      - name: Opentofu Plan
        id: opentofu_plan
        working-directory: ${{ inputs.working_directory }}
        run: |
          tofu plan -var-file="vars.tfvars" -input=false

      # Add Pull Request Comment
      - name: Add Pull Request Comment
        id: pr_comment
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        continue-on-error: true
        env:
          PLAN: "opentofu\n${{ steps.opentofu_plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Opentofu Validation & Plan Results
            * Opentofu Version üìé\`${{ inputs.tofu_version }}\`
            * Working Directory üìÇ\`${{ inputs.working_directory }}\`
            * Opentofu Initialization ‚öôÔ∏è\`${{ steps.opentofu_init.outcome }}\`
            * Opentofu Validation ü§ñ\`${{ steps.opentofu_validate.outcome }}\`
            * Opentofu Plan üìñ\`${{ steps.opentofu_plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  apply:
    name: Opentofu Apply
    runs-on: [self-hosted]
    continue-on-error: false
    environment: ${{ inputs.environment }}
    # if: github.event_name == 'push' || github.event_name == 'release'
    needs: [plan]
    concurrency:
      group: opentofu-${{ inputs.environment }}
      cancel-in-progress: false

    env:
      ARM_TENANT_ID: ${{ inputs.tenant_id }}
      ARM_SUBSCRIPTION_ID: ${{ inputs.subscription_id }}
      ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
      ARM_USE_OIDC: true

    steps:
      # Setup Node
      - name: Setup Node
        id: node_setup
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}

      # Setup Opentofu
      - name: Setup Opentofu
        id: opentofu_setup
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: ${{ inputs.tofu_version }}
          tofu_wrapper: true

      # Check Out Repository
      - name: Check Out Repository
        id: checkout_repository
        uses: actions/checkout@v4

      # Azure login
      - name: Azure login
        id: azure_login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.CLIENT_ID }}
          tenant-id: ${{ inputs.tenant_id }}
          subscription-id: ${{ inputs.subscription_id }}

      # Opentofu Init
      - name: Opentofu Init
        id: opentofu_init
        working-directory: ${{ inputs.working_directory }}
        run: |
          tofu init -backend-config="azurerm.tfbackend"

      # Opentofu Apply
      - name: Opentofu Apply
        id: opentofu_apply
        working-directory: ${{ inputs.working_directory }}
        run: |
          tofu apply -var-file="vars.tfvars" -auto-approve -input=false
